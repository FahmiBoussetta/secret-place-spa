/**
* The Booking entity
*/
entity Booking {
	email String required,
    /** The total price of the booking, computed with the price per night of the HousingCategory and the duration of the booking */
    totalPrice Integer required,
    comment String maxlength(500),
    validate Boolean required,
}
/**
* The Booking entity
*/
entity BookingElement {
	startDate Instant required,
    endDate Instant required,
    /** The total price of the booking, computed with the price per night of the HousingCategory and the duration of the booking */
    elementPrice Integer required,
}

/**
* The Favorites entity : no attributes beacause it's an association table 
*/
entity Favorites {}
/**
* The Rating entity  
*/
entity Rating{
	/** The rate gave */
	rate Integer required min(1) max(5),
	/** comment on the rating */
    comment String maxlength(250),
	/** The date the rating has been done */
    ratingDate Instant required,
}

/*
* The Establishment entity
*/
entity Establishment {
    /** name of the establishement */
	name String required minlength(1) maxlength(150),
    /** adress of the establishement */
    address String required minlength(1) maxlength(150),
    /** latitude of the establishement, useful to place it on a map */
    latitude Float, 
    /** longitude of the establishement, useful to place it on a map */
    longitude Float,
    /** globalRate of the establishement, computed after each new Rate */
    globalRate Float,    
	/** The type of establishment */
    establishmentType EstablishmentType required,
    /** Does the establishment has a private parking ? */
    hasParking Boolean required,
    /** Does the establishment has a restaurant ? */
    hasRestaurant Boolean required,
    /** Does the establishment has free wifi ? */
    hasFreeWifi Boolean required,
    /** Description of the establishment */
    description String maxlength(300),
}

/* 
* The Manage entity : association table
*/
entity Manage {
}


entity EstablishmentClosure {
	startDate Instant required,
    endDate Instant required,
    cause String maxlength(250),
}

/*
* The HousingCategory entity
*/
entity HousingTemplate {
	/** The type of housing */
    housingType HousingType required,
    /** Number of unit of this kind of housing the establishment has */
	nbOfUnit Integer required min(1),
    /** The maximum number of persons that can live in this kind of housing */
    nbMaxOfOccupants Integer required min(1),
    /** Price per night */
    price Float required
}

entity HousingClosure {
	startDate Instant required,
    endDate Instant required,
    cause String maxlength(250),
}

/**
*	Enumeration of Housing Types
*/
enum HousingType{
	SPA_PREMIUM,
    SPA
}
/**
*	Enumeration of housing types
*/
enum EstablishmentType{
	SECRETPLACESPA
}

/**
*	The photo entity
*/
entity Photo {
	/** The photo name */
    name String required minlength(1),
}
// BOOKING RELATIONS :

relationship ManyToOne {
  /** The user that made the Booking, may be null if the Booking was made by an unauthentified user */
  Booking { jhiUserId }
  to
  User,
   /** The establishment where the booking was made */
  Booking { establishmentId }
  to
  Establishment 
}

// BOOKING ELEMENT RELATIONS :

relationship ManyToOne {
  /** The Booking this booking element is a part of */
  BookingElement { bookingId }
  to
  Booking,
   /** The housing template this booking element is on */
  BookingElement { housingTemplateId }
  to
  HousingTemplate 
}

// FAVORITES RELATIONS :

relationship ManyToOne {
  /** The user that has got this favorite record */
  Favorites {userId}
  to
  User,
   /** The establishment the user put in his favorites */
  Favorites { establishmentId }
  to
  Establishment 
}

// RATING RELATIONS :

relationship ManyToOne {
  /** The user that has got this favorite record */
  Rating {userId}
  to
  User,
   /** The establishment the user put in his favorites */
  Rating { establishmentId }
  to
  Establishment 
}


// MANAGE RELATIONS :

relationship ManyToOne {
  /** The user that manage the establishment */
  Manage {userId}
  to
  User,
   /** The establishment that is managed */
  Manage { establishmentId }
  to
  Establishment 
}

// ESTABLISHMENT CLOSURE RELATIONS :

relationship ManyToOne {
  /** The establishment that is closed */
  EstablishmentClosure { establishmentId }
  to
  Establishment,
}

// HOUSING CLOSURE RELATIONS :

relationship ManyToOne {
  /** The establishment that is closed */
  HousingClosure { establishmentId }
  to
  HousingTemplate,
}

// HOUSING TEMPLATE RELATIONS :

relationship ManyToOne {
  /** The establishment that owns this housing template */
  HousingTemplate { establishmentId }
  to
  Establishment,
}

// PHOTO RELATIONSHIP

relationship ManyToOne {
	/** The Housing template associated with this photo, maybe null if it's a photo only associated to the establishment */
	Photo { housingTemplateId }
    to
    HousingTemplate,
    /** The Establishement associated with this photo, cannot be null */
    Photo { establishmentId }
    to
    Establishment,  
}
